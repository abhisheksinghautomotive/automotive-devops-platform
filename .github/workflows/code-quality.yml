---
name: Code Quality Checks

"on":
  push:
  pull_request:
    branches: [main]

env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  code-quality-gate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          # Fetch full history for SonarQube analysis
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements-test.txt
          pip install flake8 pylint bandit pydocstyle lizard black mypy
          pip install pytest yamllint

      - name: Run enhanced quality checks with reports
        run: |
          # Create reports directory
          mkdir -p reports

          # Run pytest with XML output for SonarQube
          pytest tests/ \
            --cov=projects/can_data_platform/scripts \
            --cov=projects/can_data_platform/src \
            --cov=.github/issue_deployment \
            --cov-report=term-missing \
            --cov-report=html \
            --cov-report=xml:coverage.xml \
            --cov-report=json:coverage.json \
            --cov-fail-under=95 \
            --junit-xml=test-results.xml || true

          # Run Pylint with output for SonarQube
          pylint projects/can_data_platform/scripts/ \
                 projects/can_data_platform/src/ \
                 .github/issue_deployment/ \
                 tests/ \
                 --output-format=text \
                 --reports=no \
                 --score=no > reports/pylint-report.txt || true

          # Run Bandit with JSON output for SonarQube
          bandit -r projects/can_data_platform/scripts/ \
                    projects/can_data_platform/src/ \
                    .github/issue_deployment/ \
                    tests/ \
                 --skip B101,B311 \
                 --format json \
                 --output bandit-report.json || true

          # Run Flake8 with output for SonarQube
          flake8 projects/can_data_platform/scripts/ \
                 projects/can_data_platform/src/ \
                 .github/issue_deployment/ \
                 tests/ \
                 --output-file=reports/flake8-report.txt || true

          # Run the comprehensive quality checks as fallback
          python run_quality_checks.py || true

      - name: SonarQube Quality Gate Check
        uses: SonarSource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt
        continue-on-error: true

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      - name: Fallback Quality Gate Check
        if: failure()
        run: |
          echo "SonarQube analysis failed or not configured."
          echo "Running fallback quality checks..."
          python run_quality_checks.py

      - name: Upload quality check artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-artifacts
          path: |
            quality_checks.log
            htmlcov/
            coverage.xml
            coverage.json
            test-results.xml
            bandit-report.json
            reports/
            .scannerwork/
